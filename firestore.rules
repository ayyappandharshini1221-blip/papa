rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to get the requesting user's role
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if a user is a student
    function isStudent(userId) {
      return getRole(userId) == 'student';
    }
    
    // Helper function to check if a user is a teacher
    function isTeacher(userId) {
      return getRole(userId) == 'teacher';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow user creation (signup) for any authenticated user.
      allow create: if isSignedIn();

      // Allow a user to read/update their own document.
      // Allow teachers to read documents of their own students.
      // Allow any signed-in user to read limited data for leaderboards.
      allow read: if isSignedIn() && (
                    request.auth.uid == userId ||
                    (isTeacher(request.auth.uid) && resource.data.classIds[0] in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classIds) ||
                    isStudent(request.auth.uid) // for leaderboards
                  );
      allow update: if isSignedIn() && request.auth.uid == userId;

      // Do not allow users to be deleted for now.
      allow delete: if false;
    }

    // Rules for the 'classes' collection
    match /classes/{classId} {
      // Any authenticated user can read class data (e.g. for joining)
      allow read: if isSignedIn();

      // Only teachers can create classes for themselves.
      allow create: if isSignedIn() && isTeacher(request.auth.uid) && request.resource.data.teacherId == request.auth.uid;
      
      // Allow updates if:
      // 1. A teacher is updating their own class.
      // 2. A student is adding themselves to a class (joining).
      allow update: if isSignedIn() && 
                    (
                      (isTeacher(request.auth.uid) && resource.data.teacherId == request.auth.uid) ||
                      (isStudent(request.auth.uid) && request.auth.uid in request.resource.data.studentIds)
                    );
      
      // Only the teacher who owns the class can delete it.
      allow delete: if isSignedIn() && isTeacher(request.auth.uid) && resource.data.teacherId == request.auth.uid;
    }
  }
}
