rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read and write their own data.
    // Teachers can read basic info of students in their classes.
    // Students can read basic info of other students for leaderboards.
    match /users/{userId} {
      allow read: if request.auth != null && 
        (
          // Allow users to read their own document
          request.auth.uid == userId ||
          // Allow teachers to read data of students in their classes
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher' &&
           exists(/databases/$(database)/documents/classes/$(resource.data.classIds[0])) &&
           get(/databases/$(database)/documents/classes/$(resource.data.classIds[0])).data.teacherId == request.auth.uid
          ) ||
          // Allow any authenticated user to read limited fields for leaderboards/profiles
          (get(/databases/$(database)/documents/users/$(userId)).data.role == 'student')
        );
        
      allow create: if request.auth.uid == userId;

      allow update: if request.auth.uid == userId &&
        // Prevent users from changing their own role
        request.resource.data.role == resource.data.role;
        
      allow delete: if request.auth.uid == userId;
    }

    // Classes can be created by teachers.
    // Only the teacher of a class can update it.
    // Enrolled students can read class data.
    match /classes/{classId} {
      allow read: if request.auth != null &&
        (
          // Teacher of the class
          get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid ||
          // Student is in the class
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classIds.hasAny([classId])
        );

      allow create: if request.auth != null &&
        // User is a teacher and is the teacher of this new class
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher' &&
        request.resource.data.teacherId == request.auth.uid;
        
      allow update: if request.auth != null &&
        (
          // Only the teacher of the class can modify it
          get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid ||
          // Students can join a class (update studentIds)
          (request.auth.uid in request.resource.data.studentIds && !(request.auth.uid in resource.data.studentIds))
        );
        
      allow delete: if request.auth != null && 
        // Only the teacher of the class can delete it
        get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
    }
  }
}
