/**
 * @fileoverview Firestore Security Rules for EduSmart AI platform.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid access control model, primarily based on
 * ownership and shared access, with structural segregation for certain
 * collections. User data is strictly controlled by the user themselves. Classes
 * and their associated data (quizzes, leaderboards) are accessible to teachers
 * who created the class and students enrolled in it. Public read access is
 * granted to the 'badges' collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /classes/{classId}: Stores class information; teacherId and studentIds control access.
 * - /classes/{classId}/quizzes/{quizId}: Stores quizzes assigned to classes.
 * - /badges/{badgeId}: Stores badge information (publicly readable).
 * - /classes/{classId}/leaderboard/{leaderboardId}: Stores leaderboard data for classes.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Teachers and enrolled students have access to class-related data.
 * - 'badges' collection is publicly readable.
 * - Listing of user documents is disallowed.
 * - Data validation is minimal in this prototype, focusing on ownership and
 *   relationship integrity rather than comprehensive schema validation.
 *
 * Denormalization for Authorization:
 * - Class documents denormalize teacherId and studentIds for efficient access control.
 * - Quizzes and Leaderboard entries nested under classes inherit access control via class membership.
 *
 * Structural Segregation:
 * - Quizzes are segregated based on whether they are assigned to student or created by a specific teacher.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Users can only
     *   read/write their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile
     *   if request.auth.uid == 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can get their own profile.
     * @allow (update) - User with UID 'user_abc' can update their own profile.
     * @allow (delete) - User with UID 'user_abc' can delete their own profile.
     * @deny (create) - User with UID 'user_abc' cannot create a profile for
     *   'user_xyz'.
     * @deny (get) - User with UID 'user_abc' cannot get the profile of
     *   'user_xyz'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Controls access to class documents. Teachers (creators) and
     *   enrolled students have access.
     * @path /classes/{classId}
     * @allow (create) - Teacher with UID 'teacher_abc' can create a class.
     * @allow (get) - Teacher with UID 'teacher_abc' or a student with UID
     *   'student_xyz' enrolled in the class can get the class data.
     * @allow (update) - Teacher with UID 'teacher_abc' can update the class
     *   data.
     * @allow (delete) - Teacher with UID 'teacher_abc' can delete the class.
     * @deny (create) - Student cannot create a class.
     * @deny (get) - User not enrolled in the class cannot get the class data.
     * @principle Enforces shared access based on teacherId and studentIds.
     */
    match /classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeacher(teacherId) {
        return request.auth.uid == teacherId;
      }

      function isStudent(studentIds) {
        return request.auth.uid in studentIds;
      }

      function isClassMember(teacherId, studentIds) {
        return isTeacher(teacherId) || (studentIds != null && isStudent(studentIds));
      }

      function isExistingClassMember(teacherId, studentIds) {
        return isClassMember(teacherId, studentIds) && resource.data != null;
      }

      allow get: if isSignedIn() && isClassMember(resource.data.teacherId, resource.data.studentIds);
      allow list: if false;
      allow create: if isSignedIn() && isTeacher(request.resource.data.teacherId);
      allow update: if isSignedIn() && isTeacher(resource.data.teacherId);
      allow delete: if isSignedIn() && isTeacher(resource.data.teacherId);
    }

    /**
     * @description Controls access to quizzes within a class. Only teachers
     *   and assigned students have access.
     * @path /classes/{classId}/quizzes/{quizId}
     * @allow (create) - Teacher can create quizzes for the class.
     * @allow (get) - Teacher or assigned student can access the quiz.
     * @allow (update) - Teacher can update the quiz.
     * @allow (delete) - Teacher can delete the quiz.
     * @deny (create) - Student cannot create quizzes for the class.
     * @deny (get) - User not assigned to the quiz cannot get the quiz.
     * @principle Enforces shared access based on class membership.
     */
    match /classes/{classId}/quizzes/{quizId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeacherOfClass(classId) {
        return get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
      }

      function isAssignedStudent(assignedTo) {
        return request.auth.uid in assignedTo;
      }

      function canAccessQuiz(classId, assignedTo) {
        return isTeacherOfClass(classId) || (assignedTo != null && isAssignedStudent(assignedTo));
      }

      function isExistingTeacherOfClass(classId) {
        return isTeacherOfClass(classId) && resource.data != null;
      }

      allow get: if isSignedIn() && canAccessQuiz(classId, resource.data.assignedTo);
      allow list: if false;
      allow create: if isSignedIn() && isTeacherOfClass(classId);
      allow update: if isSignedIn() && isTeacherOfClass(classId);
      allow delete: if isSignedIn() && isTeacherOfClass(classId);
    }

    /**
     * @description Allows public read access to badges; write access is not
     *   allowed in this prototype.
     * @path /badges/{badgeId}
     * @allow (get) - Any user can get a badge.
     * @allow (list) - Any user can list badges.
     * @deny (create) - No user can create a badge.
     * @deny (update) - No user can update a badge.
     * @principle Grants public read access to badge data.
     */
    match /badges/{badgeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to leaderboard data within a class. Only
     *   teachers and enrolled students have access.
     * @path /classes/{classId}/leaderboard/{leaderboardId}
     * @allow (create) - Teacher can create leaderboard entries for the class.
     * @allow (get) - Teacher or enrolled student can access the leaderboard
     *   data.
     * @allow (update) - Teacher can update the leaderboard data.
     * @allow (delete) - Teacher can delete the leaderboard data.
     * @deny (create) - Student cannot create leaderboard entries for the class.
     * @deny (get) - User not enrolled in the class cannot get the leaderboard
     *   data.
     * @principle Enforces shared access based on class membership.
     */
    match /classes/{classId}/leaderboard/{leaderboardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeacherOfClass(classId) {
        return get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
      }

      function isStudentEnrolled(classId) {
        return request.auth.uid in get(/databases/$(database)/documents/classes/$(classId)).data.studentIds;
      }

      function canAccessLeaderboard(classId) {
        return isTeacherOfClass(classId) || isStudentEnrolled(classId);
      }

      function isExistingTeacherOfClass(classId) {
        return isTeacherOfClass(classId) && resource.data != null;
      }

      allow get: if isSignedIn() && canAccessLeaderboard(classId);
      allow list: if false;
      allow create: if isSignedIn() && isTeacherOfClass(classId);
      allow update: if isSignedIn() && isTeacherOfClass(classId);
      allow delete: if isSignedIn() && isTeacherOfClass(classId);
    }
  }
}